package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"
)

type Loc struct {
	Name string `json:"name"`
}
type DC struct {
	Type            string      `json:"type"`
	RequiresConsent bool        `json:"requires_consent"`
	RetentionPeriod interface{} `json:"retention_period"`
}
type Job struct {
	AbsoluteURL    string        `json:"absolute_url"`
	DataCompliance []DC          `json:"data_compliance"`
	Education      string        `json:"education,omitempty"`
	InternalJobID  int64         `json:"internal_job_id"`
	Location       Loc           `json:"location"`
	Metadata       []interface{} `json:"metadata"`
	ID             int64         `json:"id"`
	UpdatedAt      time.Time     `json:"updated_at"`
	RequisitionID  string        `json:"requisition_id"`
	Title          string        `json:"title"`
}

type AutoGenerated struct {
	Jobs []Job `json:"jobs"`
	Meta Meta  `json:"meta"`
}

type Meta struct {
	Total int `json:"total"`
}

func main() {
	resp, err := http.Get("https://boards-api.greenhouse.io/v1/boards/twitch/jobs")

	if err != nil {
		panic(err)
	}
	data, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}

	jobs := AutoGenerated{}
	json.Unmarshal(data, &jobs)

	//spew.Dump(jobs)

	//fmt.Printf("Found %d jobs. %d jobs listed in meta\n", len(jobs.Jobs), jobs.Meta.Total)
	yesterday := time.Now().Add(time.Hour * -24)
	for _, job := range jobs.Jobs {

		//updated, err := time.Parse("2006-01-02T15:04:05-07:00", job.UpdatedAt)
		if err != nil {
			panic(err)
		}
		if job.UpdatedAt.After(yesterday) {
			fmt.Printf(
				"JOB: %s\n"+
					"LOC: %s\n"+
					"Updated: %s\n"+
					"URL: %s\n"+
					"\n",
				job.Title, job.Location.Name, job.UpdatedAt.Format("Jan 2, 15:04:05"), job.AbsoluteURL)

		}
	}
}
